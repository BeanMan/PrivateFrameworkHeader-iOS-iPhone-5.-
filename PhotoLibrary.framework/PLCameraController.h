/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/PhotoLibrary.framework/PhotoLibrary
 */

/* RuntimeBrowser encountered an ivar type encoding it does not handle. 
   See Warning(s) below.
 */

@class AVCaptureStillImageOutput, AVCaptureMovieFileOutput, AVCaptureVideoPreviewLayer, SBSAccelerometer, AVCaptureSession, AVCaptureVideoDataOutput, AVCaptureDevice, AVCaptureDeviceInput, <PLCameraControllerDelegate>, NSString, AVCaptureOutput, NSTimer;

@interface PLCameraController : NSObject <SBSAccelerometerDelegate, AVCaptureFileOutputRecordingDelegate, AVCaptureVideoDataOutputSampleBufferDelegate> {
    AVCaptureSession *_avCaptureSession;
    AVCaptureDevice *_avCaptureDeviceFront;
    AVCaptureDevice *_avCaptureDeviceBack;
    AVCaptureDevice *_avCaptureDeviceAudio;
    AVCaptureDeviceInput *_avCaptureInputFront;
    AVCaptureDeviceInput *_avCaptureInputBack;
    AVCaptureDeviceInput *_avCaptureInputAudio;
    AVCaptureStillImageOutput *_avCaptureOutputPhoto;
    AVCaptureMovieFileOutput *_avCaptureOutputVideo;
    AVCaptureVideoDataOutput *_avCaptureOutputPanorama;
    struct OpaqueFigSampleBufferProcessor { } *_panoramaProcessor;
    struct _CAImageQueue { } *_panoramaImageQueue;
    struct CGSize { 
        float width; 
        float height; 
    } _panoramaPreviewSize;
    float _panoramaPreviewScale;
    struct dispatch_queue_s { } *_avCaptureSessionDispatchQueue;
    AVCaptureDevice *_currentDevice;
    AVCaptureDeviceInput *_currentInput;
    AVCaptureOutput *_currentOutput;
    AVCaptureVideoPreviewLayer *_previewLayer;
    BOOL _shouldBeStopped;
    int _cameraMode;
    int _cameraDevice;
    int _flashMode;
    int _captureOrientation;
    BOOL _imageWriterQueueIsAvailable;
    BOOL _hdrEnabled;
    BOOL _hdrCaptureIncludesEV0Image;
    int _hdrEV0PhotoCaptureCount;
    float _zoomFactor;
    <PLCameraControllerDelegate> *_delegate;
    double _maximumCaptureDuration;
    int _captureQuality;
    NSString *_videoCapturePath;
    SBSAccelerometer *_accelerometer;
    struct CGImage { } *_lastVideoPreviewFrameImageRef;
    BOOL _lockFocusLock;
    BOOL _lockFocusAfterFocusFinishes;
    BOOL _isFocusingOnFace;
    int _cameraOrientation;
    NSTimer *_idleTimerTimer;
    BOOL _delaySuspend;
    NSTimer *_delaySuspendTimer;
    int _imageWriterQueueAvailabilityToken;
    struct { 
        unsigned int supportsVideo : 1; 
        unsigned int supportsFocus : 1; 
        unsigned int supportsExposure : 1; 
        unsigned int supportsZoom : 1; 
        unsigned int supportsHDR : 1; 
        unsigned int supportsPanorama : 1; 
        unsigned int hasFlash : 1; 
        unsigned int hasFrontCamera : 1; 
        unsigned int deferStartVideoCapture : 1; 
        unsigned int inCall : 1; 
        unsigned int isCapturingPanorama : 1; 
        unsigned int focusDisabled : 1; 
        unsigned int focusWasModified : 1; 
        unsigned int serverDied : 1; 
        unsigned int didGetDeviceUnavailableInBackground : 1; 
        unsigned int didSetLocationData : 1; 
        unsigned int isChangingMode : 1; 
        unsigned int flashWillFireAutomatically : 1; 
        unsigned int isCameraApp : 1; 
        unsigned int didSendPreviewStartedCallbackToEmptyDelegate : 1; 
        unsigned int logFocusInfo : 1; 
        unsigned int logPreviewInfo : 1; 
        unsigned int logCaptureInfo : 1; 
        unsigned int logFlashInfo : 1; 
        unsigned int logDebugInfo : 1; 
        unsigned int logPanoInfo : 1; 
        unsigned int enableFirstLastFrame : 1; 
        unsigned int enable720p60Recording : 1; 
        unsigned int convertSampleBufferToJPEG : 1; 
        unsigned int delegateDidStartSession : 1; 
        unsigned int delegateWillStartPreview : 1; 
        unsigned int delegatePreviewDidStart : 1; 
        unsigned int delegateSessionDidStart : 1; 
        unsigned int delegateDidStopSession : 1; 
        unsigned int delegateWillStopSession : 1; 
        unsigned int delegateSessionDidStop : 1; 
        unsigned int delegateSessionWasInterrupted : 1; 
        unsigned int delegateSessionInterruptionEnded : 1; 
        unsigned int delegateServerDied : 1; 
        unsigned int delegateInputPortFormatDescriptionDidChange : 1; 
        unsigned int delegateModeWillChange : 1; 
        unsigned int delegateModeDidChange : 1; 
        unsigned int delegateWillTakePhoto : 1; 
        unsigned int delegateDidTakePhoto : 1; 
        unsigned int delegateCapturedPhoto : 1; 
        unsigned int delegateDidChangeCaptureAbility : 1; 
        unsigned int delegateDidUpdatePanoramaPreview : 1; 
        unsigned int delegateWillStopPanoramaCapture : 1; 
        unsigned int delegatePanoramaWillStartProcessing : 1; 
        unsigned int delegatePanoramaDidStopProcessing : 1; 
        unsigned int delegateCapturedPanorama : 1; 
        unsigned int delegateVideoCaptureDidStart : 1; 
        unsigned int delegateDidStopVideoCapture : 1; 
        unsigned int delegateVideoCaptureDidStop : 1; 
        unsigned int delegateWillStartAutofocus : 1; 
        unsigned int delegateFocusDidStart : 1; 
        unsigned int delegateFocusDidEnd : 1; 
        unsigned int delegateTorchAvailabilityChanged : 1; 
    } _cameraFlags;

  /* Unexpected information at end of encoded ivar type: ? */
  /* Error parsing encoded ivar type info: @? */
    id postSessionSetupBlock;

}

@property(readonly) AVCaptureSession * currentSession;
@property(readonly) AVCaptureStillImageOutput * imageOutput;
@property AVCaptureDevice * currentDevice;
@property AVCaptureDeviceInput * currentInput;
@property AVCaptureOutput * currentOutput;
@property(readonly) AVCaptureVideoPreviewLayer * previewLayer;
@property(readonly) float panoramaPreviewScale;
@property(readonly) struct CGSize { float x1; float x2; } panoramaPreviewSize;
@property int captureOrientation;
@property int cameraMode;
@property int flashMode;
@property int cameraDevice;
@property BOOL convertSampleBufferToJPEG;
@property BOOL isCameraApp;
@property(readonly) BOOL supportsHDR;
@property(getter=isHDREnabled) BOOL HDREnabled;
@property float zoomFactor;
@property(copy) id postSessionSetupBlock;
@property(readonly) int cameraOrientation;

+ (id)sharedInstance;

- (id)currentSession;
- (void)_serverDied:(id)arg1;
- (void)_applicationSuspended:(id)arg1;
- (void)setDelegate:(id)arg1;
- (BOOL)isReady;
- (void)lockFocus;
- (void)autofocus;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)setCameraDevice:(int)arg1;
- (int)cameraDevice;
- (void)stopVideoCapture;
- (void)startVideoCapture;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void*)arg4;
- (void)accelerometer:(id)arg1 didAccelerateWithTimeStamp:(double)arg2 x:(float)arg3 y:(float)arg4 z:(float)arg5 eventType:(int)arg6;
- (id)delegate;
- (void)captureOutput:(id)arg1 didFinishRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3 error:(id)arg4;
- (void)captureOutput:(id)arg1 didStartRecordingToOutputFileAtURL:(id)arg2 fromConnections:(id)arg3;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })faceRectangle;
- (BOOL)hasFlash;
- (int)flashMode;
- (void)setFlashMode:(int)arg1;
- (void)captureOutput:(id)arg1 didOutputSampleBuffer:(struct opaqueCMSampleBuffer { }*)arg2 fromConnection:(id)arg3;
- (void)startPreview;
- (void)stopPreview;
- (void)setCaptureOrientation:(int)arg1;
- (float)zoomFactor;
- (struct CGSize { float x1; float x2; })panoramaPreviewSize;
- (float)panoramaPreviewScale;
- (id)imageOutput;
- (void)setCurrentDevice:(id)arg1;
- (BOOL)supportsHDR;
- (void)setHDREnabled:(BOOL)arg1;
- (BOOL)isTorchDisabled;
- (BOOL)isTorchOn;
- (BOOL)isFocusingOnFace;
- (void)setFocusDisabled:(BOOL)arg1;
- (BOOL)isExposureLockSupported;
- (BOOL)isFocusLockSupported;
- (BOOL)canLockFocus;
- (void)restartAutoFocus;
- (int)currentFocusMode;
- (void)focusAtAdjustedPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)canFocusAtPoint;
- (BOOL)isFocusAllowed;
- (void)_panoramaDidReceiveErrorNotification:(id)arg1;
- (void)_panoramaDidReceiveWarningNotification:(id)arg1;
- (void)panoramaProcessorOutputCallbackWithStatus:(long)arg1 buffer:(struct opaqueCMSampleBuffer { }*)arg2;
- (void)startPanoramaCapture;
- (void)setPanoramaImageQueueLayer:(id)arg1;
- (BOOL)isCapturingPanorama;
- (BOOL)supportsPanorama;
- (void)setVideoCaptureMaximumDuration:(double)arg1;
- (void)setVideoCaptureQuality:(int)arg1;
- (id)videoCapturePath;
- (BOOL)canCapturePhoto;
- (void)_startPreviewWithCameraDevice:(int)arg1 cameraMode:(int)arg2;
- (BOOL)_didSendPreviewStartedCallbackToEmptyDelegate;
- (BOOL)supportsZoom;
- (void)setZoomFactor:(float)arg1;
- (float)maximumZoomFactor;
- (float)minimumZoomFactor;
- (BOOL)_modeUsesCompassHeading;
- (BOOL)convertSampleBufferToJPEG;
- (void)setConvertSampleBufferToJPEG:(BOOL)arg1;
- (BOOL)hasFrontCamera;
- (void)setCameraMode:(int)arg1;
- (int)cameraMode;
- (BOOL)supportsVideoCapture;
- (BOOL)inCall;
- (void)_didTakePhoto;
- (void)_willTakePhoto;
- (void)_faceRectangleChanged;
- (void)_updateTorchAvailability;
- (void)_torchLevelChanged;
- (void)_flashStateChanged;
- (void)_whiteBalanceCompleted;
- (void)_whiteBalanceStarted;
- (void)_exposureCompleted;
- (void)_exposureStarted;
- (void)_focusCompleted;
- (void)_focusStarted;
- (void)_lockedFocusOperationFinished;
- (void)_autofocusOperationFinished;
- (void)_focusOperationFinished;
- (void)_commonFocusFinished;
- (void)_lockFocus:(BOOL)arg1 lockExposure:(BOOL)arg2 lockWhiteBalance:(BOOL)arg3;
- (void)_autofocus:(BOOL)arg1 autoExpose:(BOOL)arg2;
- (void)_unlockCurrentDeviceForConfiguration;
- (BOOL)_lockCurrentDeviceForConfiguration;
- (void)stopPanoramaCapture;
- (void)_panoramaDidStop;
- (void)lockExposure;
- (BOOL)canCapturePanorama;
- (double)minimumVideoCaptureDuration;
- (void)lockFocusForRecording;
- (id)_videoMetadataArrayIncludingSensitiveProperties:(BOOL)arg1;
- (void)_setVideoCapturePath:(id)arg1;
- (BOOL)canCaptureVideo;
- (void)_removeVideoCaptureFileAndDirectoryAtPath:(id)arg1;
- (void)_capturedPhotoWithDictionary:(id)arg1 error:(id)arg2;
- (BOOL)isHDREnabled;
- (BOOL)flashWillFire;
- (void)_setOrientation;
- (BOOL)isExposing;
- (BOOL)isFocusing;
- (BOOL)_sanityCheckSessionCanCaptureWithOutput:(id)arg1;
- (BOOL)isChangingModes;
- (void)autofocusAfterCapture;
- (void)_processCapturedPhotoWithDictionary:(id)arg1 error:(id)arg2;
- (int)captureOrientation;
- (BOOL)_isCountingHDREV0Captures;
- (void)_recoverFromServerError;
- (BOOL)isCapturingVideo;
- (void)_resetIdleTimer;
- (void)_setFlashMode:(int)arg1 force:(BOOL)arg2;
- (void)autoExpose;
- (void)_delayIdleTimerByTimeInterval:(double)arg1;
- (void)_setOrientationEventsEnabled:(BOOL)arg1;
- (id)currentInput;
- (id)previewLayer;
- (BOOL)_setupCamera;
- (void)_tearDownCamera;
- (void)executeBlockOnMainQueue:(id)arg1;
- (void)_forceDelaySuspendTimeout;
- (void)_setDelaySuspend:(BOOL)arg1;
- (id)postSessionSetupBlock;
- (void)_focusHasChanged:(id)arg1;
- (void)_inputPortFormatDescriptionDidChange:(id)arg1;
- (void)_movieFileRecordingCompleted:(id)arg1;
- (void)_interruptionEnded:(id)arg1;
- (void)_wasInterrupted:(id)arg1;
- (void)_sessionRuntimeErrored:(id)arg1;
- (void)_sessionStopped:(id)arg1;
- (void)_sessionStarted:(id)arg1;
- (void)_deviceStarted:(id)arg1;
- (void)_previewStarted:(id)arg1;
- (void)enqueueBlockInCaptureSessionQueue:(id)arg1;
- (void)enqueueBlockOnMainQueue:(id)arg1;
- (void)_configureSessionWithCameraMode:(int)arg1 cameraDevice:(int)arg2;
- (void)setCurrentInput:(id)arg1;
- (void)setCurrentOutput:(id)arg1;
- (id)_currentVideoConnection;
- (id)currentOutput;
- (void)_sanityCheckCameraMode:(int*)arg1 cameraDevice:(int*)arg2;
- (void)_setCameraMode:(int)arg1 cameraDevice:(int)arg2;
- (void)_inCallStatusChanged:(BOOL)arg1;
- (void)_teardownDelaySuspendTimer;
- (void)setPostSessionSetupBlock:(id)arg1;
- (void)_setLocationEnabled:(BOOL)arg1;
- (void)_destroyCamera;
- (void)postOrientationChangedNotification:(int)arg1 force:(BOOL)arg2;
- (void)_updateCallStatus;
- (void)_callStateDidChange:(id)arg1;
- (void)_imageWriterQueueAvailabilityChanged;
- (void)_applicationWilEnterForeground:(id)arg1;
- (void)_synchronizeHDRSettings;
- (void)setIsCameraApp:(BOOL)arg1;
- (BOOL)isCameraApp;
- (id)currentDevice;
- (id)init;
- (void)dealloc;
- (void)accelerometer:(id)arg1 didChangeDeviceOrientation:(int)arg2;
- (void)capturePhoto;
- (int)cameraOrientation;
- (void)_setCameraOrientation:(int)arg1;

@end
