/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/OfficeImport.framework/OfficeImport
 */

@interface NSBezierPathStub : NSObject <NSCopying> {
    int _segmentCount;
    int _segmentMax;
    struct PATHSEGMENT { unsigned char x1; struct CGPoint { 
            float x; 
            float y; 
        } x2; } *_head;
    int _lastSubpathIndex;
    int _elementCount;
    float _lineWidth;
    struct CGRect { 
        struct CGPoint { 
            float x; 
            float y; 
        } origin; 
        struct CGSize { 
            float width; 
            float height; 
        } size; 
    } _controlPointBounds;
    float _miterLimit;
    float _flatness;
    float *_dashedLinePattern;
    unsigned int _dashedLineCount;
    float _dashedLinePhase;
    void *_path;
    id _private[4];
    struct $_621 { 
        unsigned int _flags : 8; 
        unsigned int _pathState : 2; 
        unsigned int _unused : 22; 
    } _bpFlags;
}

+ (id)bezierPathWithRoundedRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 xRadius:(float)arg2 yRadius:(float)arg3;
+ (void)strokeRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (void)strokeLineFromPoint:(struct CGPoint { float x1; float x2; })arg1 toPoint:(struct CGPoint { float x1; float x2; })arg2;
+ (void)drawPackedGlyphs:(const char *)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2;
+ (unsigned int)windingRule;
+ (void)setDefaultMiterLimit:(float)arg1;
+ (float)defaultMiterLimit;
+ (void)setDefaultFlatness:(float)arg1;
+ (float)defaultFlatness;
+ (void)setDefaultWindingRule:(unsigned int)arg1;
+ (unsigned int)defaultWindingRule;
+ (void)setDefaultLineCapStyle:(unsigned int)arg1;
+ (unsigned int)defaultLineCapStyle;
+ (void)setDefaultLineJoinStyle:(unsigned int)arg1;
+ (unsigned int)defaultLineJoinStyle;
+ (void)setDefaultLineWidth:(float)arg1;
+ (float)defaultLineWidth;
+ (void)setCurrentCGContext:(struct CGContext { }*)arg1;
+ (void)drawString:(id)arg1 atPoint:(struct CGPoint { float x1; float x2; })arg2 withFontName:(id)arg3 andHeight:(float)arg4 color:(id)arg5 alignToTop:(BOOL)arg6 currentTransformStruct:(struct { float x1; float x2; float x3; float x4; float x5; float x6; })arg7;
+ (struct CGContext { }*)currentCGContext;
+ (void)clipRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (void)setWindingRule:(unsigned int)arg1;
+ (void)fillRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (void)initialize;
+ (void)setFlatness:(float)arg1;
+ (float)flatness;
+ (void)setMiterLimit:(float)arg1;
+ (float)miterLimit;
+ (void)setLineJoinStyle:(unsigned int)arg1;
+ (unsigned int)lineJoinStyle;
+ (void)setLineCapStyle:(unsigned int)arg1;
+ (unsigned int)lineCapStyle;
+ (void)setLineWidth:(float)arg1;
+ (float)lineWidth;
+ (id)bezierPathWithOvalInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (id)bezierPathWithRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
+ (id)bezierPath;

- (void)relativeMoveToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)relativeLineToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)relativeCurveToPoint:(struct CGPoint { float x1; float x2; })arg1 controlPoint1:(struct CGPoint { float x1; float x2; })arg2 controlPoint2:(struct CGPoint { float x1; float x2; })arg3;
- (id)bezierPathByFlatteningPath;
- (id)bezierPathByReversingPath;
- (void)setAssociatedPoints:(struct CGPoint { float x1; float x2; }*)arg1 atIndex:(int)arg2;
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint { float x1; float x2; })arg1 toPoint:(struct CGPoint { float x1; float x2; })arg2 radius:(float)arg3;
- (int)_locationOfPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isHitByPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isHitByRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isHitByPath:(id)arg1;
- (BOOL)isStrokeHitByPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)isStrokeHitByRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (BOOL)isStrokeHitByPath:(id)arg1;
- (BOOL)cachesBezierPath;
- (void)setCachesBezierPath:(BOOL)arg1;
- (void)appendBezierPathWithRoundedRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 xRadius:(float)arg2 yRadius:(float)arg3;
- (unsigned int)windingRule;
- (void)_deviceMoveToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_deviceLineToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)_deviceCurveToPoint:(struct CGPoint { float x1; float x2; })arg1 controlPoint1:(struct CGPoint { float x1; float x2; })arg2 controlPoint2:(struct CGPoint { float x1; float x2; })arg3;
- (void)_deviceClosePath;
- (void)_doUserPathWithOp:(unsigned char)arg1 inContext:(struct CGContext { }*)arg2;
- (void)subdivideBezierWithFlatness:(float)arg1 startPoint:(struct CGPoint { float x1; float x2; })arg2 controlPoint1:(struct CGPoint { float x1; float x2; })arg3 controlPoint2:(struct CGPoint { float x1; float x2; })arg4 endPoint:(struct CGPoint { float x1; float x2; })arg5;
- (void)flattenIntoPath:(id)arg1;
- (void)_doPath;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })controlPointBounds;
- (int)_segmentIndexForElementIndex:(int)arg1;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { float x1; float x2; })arg1 radius:(float)arg2 startAngle:(float)arg3 endAngle:(float)arg4;
- (void)transformUsingAffineTransform:(id)arg1;
- (void)_appendArcSegmentWithCenter:(struct CGPoint { float x1; float x2; })arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;
- (id)_copyFlattenedPath;
- (void)_addPathSegment:(int)arg1 point:(struct CGPoint { float x1; float x2; })arg2;
- (void)appendBezierPathWithPoints:(struct CGPoint { float x1; float x2; }*)arg1 count:(int)arg2;
- (void)setClip;
- (void)setWindingRule:(unsigned int)arg1;
- (void)appendBezierPathWithArcWithRect:(struct CGPoint { float x1; float x2; })arg1 rightBottom:(struct CGPoint { float x1; float x2; })arg2 start:(struct CGPoint { float x1; float x2; })arg3 end:(struct CGPoint { float x1; float x2; })arg4 clockwise:(BOOL)arg5;
- (id)getGlyphs:(id)arg1 :(id)arg2 :(unsigned int*)arg3;
- (void)appendBezierPathWithString:(id)arg1 attributes:(id)arg2;
- (void)appendBezierPathWithString:(id)arg1 attributes:(id)arg2 spacing:(int*)arg3 spacingCount:(int)arg4;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { float x1; float x2; })arg1 radiusSize:(struct CGSize { float x1; float x2; })arg2 startAngle:(float)arg3 endAngle:(float)arg4 clockwise:(BOOL)arg5;
- (void)attachBezierPath:(id)arg1;
- (unsigned int)elementAtIndex:(int)arg1 associatedPoints:(struct CGPoint { float x1; float x2; }*)arg2;
- (BOOL)equalToCurrentPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)curveToPoint:(struct CGPoint { float x1; float x2; })arg1 controlPoint1:(struct CGPoint { float x1; float x2; })arg2 controlPoint2:(struct CGPoint { float x1; float x2; })arg3;
- (int)elementCount;
- (unsigned int)elementAtIndex:(int)arg1;
- (void)finalize;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })bounds;
- (void)setFlatness:(float)arg1;
- (float)flatness;
- (void)setMiterLimit:(float)arg1;
- (float)miterLimit;
- (void)setLineJoinStyle:(unsigned int)arg1;
- (unsigned int)lineJoinStyle;
- (void)setLineCapStyle:(unsigned int)arg1;
- (unsigned int)lineCapStyle;
- (void)setLineWidth:(float)arg1;
- (float)lineWidth;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint { float x1; float x2; })arg1 radius:(float)arg2 startAngle:(float)arg3 endAngle:(float)arg4 clockwise:(BOOL)arg5;
- (void)appendBezierPathWithOvalInRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)appendBezierPathWithRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)appendBezierPath:(id)arg1;
- (void)lineToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)stroke;
- (void)fill;
- (void)getLineDash:(float*)arg1 count:(int*)arg2 phase:(float*)arg3;
- (void)setLineDash:(const float*)arg1 count:(int)arg2 phase:(float)arg3;
- (BOOL)containsPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGPoint { float x1; float x2; })currentPoint;
- (BOOL)isEmpty;
- (void)removeAllPoints;
- (void)closePath;
- (void)moveToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (void)addClip;
- (id)description;
- (id)copyWithZone:(struct _NSZone { }*)arg1;
- (id)init;
- (void)dealloc;

@end
