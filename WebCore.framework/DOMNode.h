/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/WebCore.framework/WebCore
 */

/* RuntimeBrowser encountered one or more ivar type encodings for a function pointer. 
   The runtime does not encode function signature information.  We use a signature of: 
           "int (*funcName)()",  where funcName might be null. 
 */

@class UITextPosition, UIImage, UITextSelectionView, UIColor, UITextRange, DOMNode, DOMDocument, DOMNamedNodeMap, UITextInteractionAssistant, UIView<UITextSelectingContent>, <UITextInputDelegate>, UIView, <UITextInputTokenizer>, NSDictionary, UIResponder<UITextSelection>, DOMNodeList, DOMElement, NSString;

@interface DOMNode : DOMObject <DOMEventTarget, UIKeyboardInput, UIKeyInput, UITextInputTokenizer, UIWebSelectionBlock> {
}

@property(readonly) BOOL mf_isBody;
@property int autocapitalizationType;
@property int autocorrectionType;
@property int spellCheckingType;
@property int keyboardType;
@property int keyboardAppearance;
@property int returnKeyType;
@property BOOL enablesReturnKeyAutomatically;
@property(getter=isSecureTextEntry) BOOL secureTextEntry;
@property(copy) UITextRange * selectedTextRange;
@property(readonly) UITextRange * markedTextRange;
@property(copy) NSDictionary * markedTextStyle;
@property(readonly) UITextPosition * beginningOfDocument;
@property(readonly) UITextPosition * endOfDocument;
@property <UITextInputDelegate> * inputDelegate;
@property(readonly) <UITextInputTokenizer> * tokenizer;
@property(readonly) UIView * textInputView;
@property int selectionAffinity;
@property struct __CFCharacterSet { }* textTrimmingSet;
@property(retain) UIColor * insertionPointColor;
@property(retain) UIColor * selectionBarColor;
@property(retain) UIColor * selectionHighlightColor;
@property(retain) UIImage * selectionDragDotImage;
@property unsigned int insertionPointWidth;
@property int textLoupeVisibility;
@property int textSelectionBehavior;
@property id textSuggestionDelegate;
@property BOOL contentsIsSingleValue;
@property BOOL acceptsEmoji;
@property int emptyContentReturnKeyType;
@property BOOL returnKeyGoesToNextResponder;
@property BOOL acceptsFloatingKeyboard;
@property BOOL acceptsSplitKeyboard;
@property(getter=isRichText) BOOL richText;
@property BOOL displaySecureTextUsingPlainText;
@property BOOL learnsCorrections;
@property int shortcutConversionType;
@property BOOL suppressReturnKeyStyling;
@property BOOL acceptsForwardDelete;
@property BOOL forceEnableForwardDelete;
@property(getter=isEditable,readonly) BOOL editable;
@property(getter=isEditing,readonly) BOOL editing;
@property int selectionGranularity;
@property(readonly) UITextSelectionView * selectionView;
@property(readonly) UITextInteractionAssistant * interactionAssistant;
@property(readonly) UIView<UITextSelectingContent> * content;
@property(readonly) UIResponder<UITextSelection> * textDocument;
@property(copy,readonly) NSString * nodeName;
@property(copy) NSString * nodeValue;
@property(readonly) unsigned short nodeType;
@property(retain,readonly) DOMNode * parentNode;
@property(retain,readonly) DOMNodeList * childNodes;
@property(retain,readonly) DOMNode * firstChild;
@property(retain,readonly) DOMNode * lastChild;
@property(retain,readonly) DOMNode * previousSibling;
@property(retain,readonly) DOMNode * nextSibling;
@property(retain,readonly) DOMNamedNodeMap * attributes;
@property(retain,readonly) DOMDocument * ownerDocument;
@property(copy,readonly) NSString * namespaceURI;
@property(copy) NSString * prefix;
@property(copy,readonly) NSString * localName;
@property(copy,readonly) NSString * baseURI;
@property(copy) NSString * textContent;
@property(retain,readonly) DOMElement * parentElement;
@property(readonly) BOOL isContentEditable;


- (void)finalize;
- (id)boundingBoxes;
- (void)setNodeValue:(id)arg1;
- (id)namespaceURI;
- (id)prefix;
- (void)setPrefix:(id)arg1;
- (id)localName;
- (id)baseURI;
- (id)textContent;
- (void)setTextContent:(id)arg1;
- (id)insertBefore:(id)arg1 refChild:(id)arg2;
- (id)insertBefore:(id)arg1 :(id)arg2;
- (id)replaceChild:(id)arg1 oldChild:(id)arg2;
- (id)replaceChild:(id)arg1 :(id)arg2;
- (id)appendChild:(id)arg1;
- (id)cloneNode:(BOOL)arg1;
- (void)normalize;
- (BOOL)isSupported:(id)arg1 version:(id)arg2;
- (BOOL)isSupported:(id)arg1 :(id)arg2;
- (BOOL)hasAttributes;
- (BOOL)isEqualNode:(id)arg1;
- (id)lookupPrefix:(id)arg1;
- (BOOL)isDefaultNamespace:(id)arg1;
- (unsigned short)compareDocumentPosition:(id)arg1;
- (void)addEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (void)removeEventListener:(id)arg1 listener:(id)arg2 useCapture:(BOOL)arg3;
- (BOOL)dispatchEvent:(id)arg1;
- (void)addEventListener:(id)arg1 :(id)arg2 :(BOOL)arg3;
- (void)removeEventListener:(id)arg1 :(id)arg2 :(BOOL)arg3;
- (id)lookupNamespaceURI:(id)arg1;
- (struct RootObject { }*)_rootObject;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingBoxUsingTransforms;
- (id)lineBoxQuads;
- (id)hrefTarget;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })hrefFrame;
- (id)hrefTitle;
- (id)lineBoxRects;
- (id)nodeValue;
- (id)nodeName;
- (id)textRects;
- (struct Element { int (**x1)(); int (**x2)(); int x3; struct ContainerNode {} *x4; struct Weak<WebCore::JSDOMWrapper> { struct JSValue {} *x_5_1_1; } x5; struct Document {} *x6; struct Node {} *x7; struct Node {} *x8; struct RenderObject {} *x9; unsigned int x10; struct Node {} *x11; struct Node {} *x12; struct QualifiedName { struct QualifiedNameImpl {} *x_13_1_1; } x13; struct RefPtr<WebCore::NamedNodeMap> { struct NamedNodeMap {} *x_14_1_1; } x14; }*)_linkElement;
- (float)computedFontSize;
- (id)previousFocusNode;
- (id)nextFocusNode;
- (id)attributes;
- (struct _WKQuad { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGPoint { float x_2_1_1; float x_2_1_2; } x2; struct CGPoint { float x_3_1_1; float x_3_1_2; } x3; struct CGPoint { float x_4_1_1; float x_4_1_2; } x4; })absoluteQuadAndInsideFixedPosition:(BOOL*)arg1;
- (BOOL)containsOnlyInlineObjects;
- (BOOL)isSelectableBlock;
- (id)parentElement;
- (id)rangeOfContainingParagraph;
- (id)findExplodedTextNodeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (float)textHeight;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingBox;
- (id)absoluteQuads;
- (id)hrefURL;
- (id)borderRadii;
- (BOOL)isSameNode:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingFrame;
- (id)hrefLabel;
- (struct _WKQuad { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGPoint { float x_2_1_1; float x_2_1_2; } x2; struct CGPoint { float x_3_1_1; float x_3_1_2; } x3; struct CGPoint { float x_4_1_1; float x_4_1_2; } x4; })innerFrameQuad;
- (id)removeChild:(id)arg1;
- (id)previousSibling;
- (id)parentNode;
- (BOOL)isContentEditable;
- (struct _WKQuad { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGPoint { float x_2_1_1; float x_2_1_2; } x2; struct CGPoint { float x_3_1_1; float x_3_1_2; } x3; struct CGPoint { float x_4_1_1; float x_4_1_2; } x4; })absoluteQuad;
- (id)lastChild;
- (id)childNodes;
- (id)ownerDocument;
- (BOOL)hasChildNodes;
- (id)nextSibling;
- (unsigned short)nodeType;
- (id)firstChild;
- (id)description;
- (void)dealloc;
- (id)_subresourceURLs;
- (BOOL)isHorizontalWritingMode;
- (void)showPlaceholderIfNecessary;
- (void)hidePlaceholder;
- (id)markupString;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_renderRect:(bool*)arg1;
- (id)webArchive;
- (id)rangeOfContents;
- (id)endPosition;
- (id)startPosition;
- (id)itemTitle;
- (void)populateCell:(id)arg1;
- (id)createPickerCell;
- (id)createSelectedItem;
- (id)createPeripheral;
- (id)urlScheme;
- (id)tagName;
- (BOOL)isTextControl;
- (BOOL)isSecure;
- (int)keyboardType;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 toView:(id)arg2;
- (BOOL)editable;
- (void)moveDown;
- (void)moveUp;
- (void)moveLeft;
- (void)moveRight;
- (void)setInitialSelectionBehavior:(int)arg1;
- (int)initialSelectionBehavior;
- (void)setSelectionWithPoint:(struct CGPoint { float x1; float x2; })arg1 inset:(float)arg2;
- (struct CGPoint { float x1; float x2; })constrainedPoint:(struct CGPoint { float x1; float x2; })arg1 withInset:(float)arg2;
- (id)uiWebDocumentView;
- (id)rangeOfEnclosingWord:(id)arg1;
- (void)setSelectedTextRange:(id)arg1 withAffinityDownstream:(BOOL)arg2;
- (void)setSecure:(BOOL)arg1;
- (void)setupPlaceholderTextIfNeeded;
- (BOOL)isShowingPlaceholder;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })convertCaretRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1;
- (void)extendCurrentSelection:(int)arg1;
- (id)rangeByExtendingCurrentSelection:(int)arg1;
- (id)rangeByMovingCurrentSelection:(int)arg1;
- (BOOL)selectionAtWordStart;
- (BOOL)selectionAtDocumentStart;
- (int)selectionState;
- (int)wordOffsetInRange:(id)arg1;
- (void)expandSelectionToStartOfWordContainingCaretSelection;
- (id)rectsForNSRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (unsigned short)characterAfterCaretSelection;
- (unsigned short)characterInRelationToCaretSelection:(int)arg1;
- (void)confirmMarkedText:(id)arg1;
- (void)replaceCurrentWordWithText:(id)arg1;
- (void)replaceRangeWithText:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1 replacementText:(id)arg2;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })_lastRectForRange:(id)arg1;
- (void)acceptedAutoFillWord:(id)arg1;
- (BOOL)isAutoFillMode;
- (void)setContentsIsSingleValue:(BOOL)arg1;
- (BOOL)contentsIsSingleValue;
- (void)setTextSuggestionDelegate:(id)arg1;
- (id)textSuggestionDelegate;
- (void)setTextTrimmingSet:(struct __CFCharacterSet { }*)arg1;
- (BOOL)isPosition:(id)arg1 withinTextUnit:(int)arg2 inDirection:(int)arg3;
- (id)positionFromPosition:(id)arg1 toBoundary:(int)arg2 inDirection:(int)arg3;
- (BOOL)isPosition:(id)arg1 atBoundary:(int)arg2 inDirection:(int)arg3;
- (id)rangeEnclosingPosition:(id)arg1 withGranularity:(int)arg2 inDirection:(int)arg3;
- (id)fontForCaretSelection;
- (void)setMarkedText:(id)arg1;
- (id)markedText;
- (id)wordRangeContainingCaretSelection;
- (id)wordContainingCaretSelection;
- (unsigned short)characterBeforeCaretSelection;
- (void)moveForward:(unsigned int)arg1;
- (void)moveBackward:(unsigned int)arg1;
- (id)nextUnperturbedMarsVoltasBoundaryFromPosition:(id)arg1;
- (id)previousUnperturbedMarsVoltasBoundaryFromPosition:(id)arg1;
- (void)handleKeyWebEvent:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectContainingCaretSelection;
- (void)replaceRangeWithTextWithoutClosingTyping:(id)arg1 replacementText:(id)arg2;
- (void)setSelectedDOMRange:(id)arg1 affinityDownstream:(BOOL)arg2;
- (BOOL)requiresKeyEvents;
- (void)setBecomesEditableWithGestures:(BOOL)arg1;
- (BOOL)becomesEditableWithGestures;
- (void)updateSelection;
- (void)detachInteractionAssistant;
- (void)detachSelectionView;
- (id)selectedDOMRange;
- (void)updateAutoscroll:(id)arg1;
- (id)automaticallySelectedOverlay;
- (id)textColorForCaretSelection;
- (id)_textSelectingContainer;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRect;
- (void)setSelectionWithPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })rectForNSRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg1;
- (BOOL)isEditable;
- (id)textDocument;
- (id)content;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })selectionClipRect;
- (id)rectsForRange:(id)arg1;
- (void)setSelectionAffinity:(int)arg1;
- (int)selectionAffinity;
- (id)characterRangeAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1 withinRange:(id)arg2;
- (id)closestPositionToPoint:(struct CGPoint { float x1; float x2; })arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })caretRectForPosition:(id)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })firstRectForRange:(id)arg1;
- (void)setBaseWritingDirection:(int)arg1 forRange:(id)arg2;
- (int)baseWritingDirectionForPosition:(id)arg1 inDirection:(int)arg2;
- (id)characterRangeByExtendingPosition:(id)arg1 inDirection:(int)arg2;
- (id)positionWithinRange:(id)arg1 farthestInDirection:(int)arg2;
- (id)tokenizer;
- (void)setInputDelegate:(id)arg1;
- (int)offsetFromPosition:(id)arg1 toPosition:(id)arg2;
- (int)comparePosition:(id)arg1 toPosition:(id)arg2;
- (id)positionFromPosition:(id)arg1 inDirection:(int)arg2 offset:(int)arg3;
- (id)positionFromPosition:(id)arg1 offset:(int)arg2;
- (id)textRangeFromPosition:(id)arg1 toPosition:(id)arg2;
- (id)endOfDocument;
- (id)beginningOfDocument;
- (void)unmarkText;
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange { unsigned int x1; unsigned int x2; })arg2;
- (void)setMarkedTextStyle:(id)arg1;
- (id)markedTextStyle;
- (id)markedTextRange;
- (void)setSelectedTextRange:(id)arg1;
- (void)replaceRange:(id)arg1 withText:(id)arg2;
- (BOOL)hasText;
- (id)metadataDictionariesForMarsVoltas;
- (void)removeYakushimasPlaceholder:(id)arg1 willInsertText:(BOOL)arg2;
- (id)insertYakushimasPlaceholder:(struct CGSize { float x1; float x2; })arg1;
- (void)insertMarsVoltas:(id)arg1 withCorrectionIdentifier:(id)arg2;
- (void)insertText:(id)arg1;
- (void)deleteBackward;
- (id)inputDelegate;
- (struct CGPoint { float x1; float x2; })constrainedPoint:(struct CGPoint { float x1; float x2; })arg1;
- (id)textInRange:(id)arg1;
- (id)selectedTextRange;
- (void)endSelectionChange;
- (void)beginSelectionChange;
- (BOOL)hasSelection;
- (void)selectAll;
- (struct _NSRange { unsigned int x1; unsigned int x2; })selectionRange;
- (struct _NSRange { unsigned int x1; unsigned int x2; })_markedTextNSRange;
- (BOOL)hasContent;
- (struct __CFCharacterSet { }*)textTrimmingSet;
- (void)takeTraitsFrom:(id)arg1;
- (int)textLoupeVisibility;
- (void)setTextLoupeVisibility:(int)arg1;
- (id)textInputTraits;
- (id)interactionAssistant;
- (id)selectionView;
- (int)returnKeyType;
- (void)setReturnKeyType:(int)arg1;
- (BOOL)isEditing;
- (BOOL)editing;
- (id)text;
- (id)delegate;
- (void)setText:(id)arg1;
- (id)_realNode;
- (id)tapHighlightColor;
- (id)absoluteQuadsAtPoint:(struct CGPoint { float x1; float x2; })arg1;
- (BOOL)showsTapHighlight;
- (BOOL)isLikelyToBeginPageLoad;
- (BOOL)nodeCanBecomeFirstResponder;
- (BOOL)touchCalloutEnabled;
- (id)enclosingElementIncludingSelf;
- (BOOL)strictlyContainsNode:(id)arg1;
- (id)firstDescendantOfAboutTheSameWidthOrHeightAsRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg1 withDescentDirection:(int)arg2;
- (id)asElement;
- (BOOL)containsNode:(id)arg1;
- (BOOL)containsRange:(id)arg1;
- (BOOL)rendersAsBlock;
- (id)largerParent;
- (BOOL)strictlyContainsBlock:(id)arg1;
- (id)lastDescendantOfAboutTheSameWidthOrHeight;
- (id)firstDescendantOfAboutTheSameWidthOrHeight;
- (BOOL)containsBlock:(id)arg1;
- (BOOL)isSameBlock:(id)arg1;
- (id)rangeOfContents;
- (BOOL)hasCustomLineHeight;
- (id)asDomRange;
- (id)enclosingDocument;
- (BOOL)canShrinkDirectlyToTextOnly;
- (id)parentBlock;
- (BOOL)selectable;
- (id)asDomNode;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingRectAndInsideFixedPosition:(int*)arg1;
- (struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })boundingRect;
- (id)webFrame;
- (id)textInputView;
- (id)_textFormElement;
- (id)_previousAssistedNode;
- (id)_nextAssistedNode;
- (BOOL)_supportsAccessoryClear;
- (BOOL)_supportsAutoFill;
- (BOOL)_requiresInputView;
- (BOOL)_requiresAccessoryView;
- (void)_stopAssistingDocumentView:(id)arg1;
- (void)_startAssistingDocumentView:(id)arg1;
- (void)_accessoryClear;
- (void)mf_fixParagraphsAndQuotesFromMicrosoft;
- (void)recursivelyRemoveMailAttributes;
- (int)mf_quoteLevelDelta;
- (void)_fixParagraphsAndQuotesFromMicrosoftNodesToRemove:(id)arg1;
- (BOOL)mf_isBody;
- (id)mf_traversePreviousNode;
- (id)mf_topmostContainingNodeWithNameInArray:(id)arg1;
- (id)mf_commonAncestorWithNode:(id)arg1;
- (BOOL)mf_isQuoteOrWithinQuote;
- (id)mf_findElementWithTag:(id)arg1 className:(id)arg2 andIdName:(id)arg3;
- (BOOL)mf_isDescendantOfNode:(id)arg1;
- (id)mf_traverseNextNodeStayingWithin:(id)arg1;
- (id)mf_traverseNextSiblingStayingWithin:(id)arg1;
- (id)mf_blockNodeAncestor;
- (id)mf_containingBlockQuote;
- (BOOL)mf_isAtBeginningOfContainerNode:(id)arg1;
- (BOOL)mf_isAtEndOfContainerNode:(id)arg1;
- (BOOL)mf_containsOnlySelectionMarkers;
- (id)mf_appendBlockPlaceholder;
- (id)mf_nextSiblingOrAunt;
- (id)mf_highestContainingBlockQuote;
- (id)mf_firstDescendantBlockQuote;
- (BOOL)mf_containsRichText;
- (void)dd_removeResultLinks;
- (BOOL)dd_searchForLinkEndNode:(id)arg1;

@end
