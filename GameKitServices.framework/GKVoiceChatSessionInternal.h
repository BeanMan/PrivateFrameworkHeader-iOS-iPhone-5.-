/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/GameKitServices.framework/GameKitServices
 */

@class GKVoiceChatServiceFocus, GKRWLock, NSMutableArray, GKSessionInternal, VoiceChatSessionRoster, GKWifiListener, NSString, <GKVoiceChatSessionDelegate>, NSMutableDictionary, NSArray;

@interface GKVoiceChatSessionInternal : NSObject <GKSessionVoiceChatDelegate, GKVoiceChatClient, VideoConferenceSpeakingDelegate, WifiListenerDelegate> {
    NSString *_sessionName;
    unsigned int _conferenceID;
    BOOL activeSession;
    float sessionVolume;
    BOOL focusCallbacks;
    GKSessionInternal *_gkSession;
    NSString *_peerID;
    NSMutableArray *_connectedPeers;
    NSMutableArray *_focusPausedPeers;
    NSMutableArray *_connectedVoicePeers;
    NSMutableArray *_connectedFocusPeers;
    NSMutableArray *_mutedPeers;
    NSMutableArray *_myPausedList;
    NSMutableDictionary *_peerChannelQuality;
    BOOL needsRecalculateGoodChannels;
    int goodChannels;
    unsigned int talkingPeersLimit;
    BOOL isUsingSuppression;
    unsigned int _sessionState;
    GKRWLock *_rwLock;
    GKVoiceChatServiceFocus *_vcService;
    VoiceChatSessionRoster *_roster;
    struct dispatch_queue_s { } *_sendQueue;
    <GKVoiceChatSessionDelegate> *delegate;
    unsigned int congestionState;
    id _publicWrapper;
    GKWifiListener *_wifiListener;
    BOOL _currentWifiState;
    unsigned long _audioInputAvailable;
}

@property(readonly) NSString * sessionName;
@property(readonly) unsigned int conferenceID;
@property(readonly) NSArray * peerList;
@property(getter=isActiveSession) BOOL activeSession;
@property float sessionVolume;
@property BOOL isUsingSuppression;
@property unsigned int talkingPeersLimit;
@property <GKVoiceChatSessionDelegate> * delegate;

+ (void)brokenHash:(id)arg1 response:(char *)arg2;

- (id)peerList;
- (float)sessionVolume;
- (void)setSessionVolume:(float)arg1;
- (BOOL)isActiveSession;
- (void)setActiveSession:(BOOL)arg1;
- (void)setMute:(BOOL)arg1 forPeer:(id)arg2;
- (void)stopSession;
- (void)startSession;
- (void)session:(id)arg1 peer:(id)arg2 didChangeState:(int)arg3;
- (void)setDelegate:(id)arg1;
- (void)setDelegate:(id)arg1;
- (void)session:(id)arg1 didReceiveAudioPacket:(id)arg2 fromPeerID:(id)arg3;
- (void)session:(id)arg1 didReceiveOOBAudioPacket:(id)arg2 fromPeerID:(id)arg3;
- (void)removeFromFocusPausedList:(id)arg1;
- (void)audioInputDidChange:(unsigned long)arg1;
- (void)startSessionInternal;
- (void)stopSessionInternal;
- (void)calculateConferenceID;
- (id)encodePeerID:(id)arg1;
- (void)updatedMutedPeers:(id)arg1 forPeer:(id)arg2;
- (void)sendMutedPeers;
- (void)updatedSubscribedBeaconList:(id)arg1;
- (unsigned int)conferenceID;
- (void)sendConnectedPeers;
- (void)unPauseAll;
- (void)updatedFocusPeers:(id)arg1;
- (void)informClientVoiceChatFocusChange:(id)arg1;
- (void)addPeerToFocusPausedList:(id)arg1;
- (int)goodChannels;
- (void)parseConnectedPeers:(id)arg1;
- (void)parseMutedPeers:(id)arg1 forPeer:(id)arg2;
- (id)decodePeerID:(id)arg1;
- (void)informClientVoiceChatSpeaking:(id)arg1;
- (void)informClientVoiceChatSilent:(id)arg1;
- (int)calculateChannelQualities;
- (void)pauseAll;
- (void)pruneBadLinks;
- (unsigned int)peerCount;
- (void)updatedFocusID:(unsigned int)arg1;
- (id)initWithGKSession:(id)arg1 publicWrapper:(id)arg2 sessionName:(id)arg3;
- (void)voiceChatService:(id)arg1 didReceiveInvitationFromParticipantID:(id)arg2 callID:(int)arg3;
- (void)voiceChatService:(id)arg1 didStartWithParticipantID:(id)arg2;
- (void)voiceChatService:(id)arg1 didNotStartWithParticipantID:(id)arg2 error:(id)arg3;
- (void)voiceChatService:(id)arg1 didStopWithParticipantID:(id)arg2 error:(id)arg3;
- (void)voiceChatService:(id)arg1 sendData:(id)arg2 toParticipantID:(id)arg3;
- (void)informClientVoiceChatDidStart:(id)arg1;
- (void)informClientVoiceChatDidStop:(id)arg1;
- (void)cleanup;
- (id)delegate;
- (id)delegate;
- (void)updatedConnectedPeers:(id)arg1;
- (unsigned int)talkingPeersLimit;
- (void)setTalkingPeersLimit:(unsigned int)arg1;
- (BOOL)isUsingSuppression;
- (void)setIsUsingSuppression:(BOOL)arg1;
- (void)didStartSpeaking:(id)arg1;
- (void)didStopSpeaking:(id)arg1;
- (void)cleanupProc:(id)arg1;
- (void)lossRate:(float)arg1 forParticipantID:(id)arg2;
- (id)participantID;
- (id)sessionName;
- (void)wifiStateDidChange:(BOOL)arg1;
- (BOOL)isEqual:(id)arg1;
- (void)dealloc;

@end
