/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/GameKitServices.framework/Frameworks/AVConference.framework/AVConference
 */

@class TimingCollection, NSObject<VideoConferenceRealTimeChannel>, VCCapabilities, NSData, LoopbackSocketTunnel, NSArray, GKRingBuffer, NSObject<VCCallSessionDelegate>, TCPTunnelClient, NSString, VCCallInfo, NSObject<VideoConferenceChannelQualityDelegate>, VCCallLinkCongestionDetector;

@interface VCCallSession : NSObject <LoopbackSocketTunnelDelegate> {
    NSObject<VCCallSessionDelegate> *delegate;
    VCCallInfo *localCallInfo;
    VCCallInfo *remoteCallInfo;
    struct tagHANDLE { int x1; } *rtpHandle;
    struct tagHANDLE { int x1; } *rtpVideo;
    struct tagHANDLE { int x1; } *encodeHandle;
    struct tagHANDLE { int x1; } *decodeHandle;
    int numEncodedBytes;
    int numBufferBytesAvailable;
    BOOL didUseICE;
    struct tagCONNRESULT { 
        int iCallID; 
        int iRemoteCallID; 
        int proto; 
        int bIfRelay; 
        unsigned short wRelayServType; 
        unsigned short wChannelNumber; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbLocal; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemote; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbDst; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRemoteSrc; 
        struct tagIPPORT { 
            int iFlags; 
            BOOL szIfName[16]; 
            union { 
                unsigned int dwIPv4; 
                unsigned char abIPv6[16]; 
            } IP; 
            unsigned short wPort; 
        } mbRelayExt; 
        unsigned int dwRTT; 
        int bIfLocalCellularQoS; 
        int bIfRemoteCellularQoS; 
        int iLocalCellTech; 
        int iRemoteCellTech; 
    } connectionResult;
    int state;
    int audioBundle;
    int payload;
    int videoPayload;
    int sampleRate;
    int samplesPerFrame;
    struct tagHANDLE { int x1; } *hAUIO;
    struct tagHANDLE { int x1; } *hSIP;
    double lastReceivedAudio;
    BOOL launchedShutdownThread;
    BOOL isAudioRunning;
    BOOL isWaitingForICEResult;
    BOOL didSend200OK;
    float remoteParticipantVolume;
    NSObject<VideoConferenceRealTimeChannel> *rtChannel;
    LoopbackSocketTunnel *tunnel;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } mutex;
    BOOL useLoopback;
    BOOL receivedSIPInvite;
    char *remoteSDP;
    char *localSDP;
    BOOL szRemoteRTPIP[48];
    int iRemoteRTPPort;
    int iRemoteRTCPPort;
    VCCapabilities *caps;
    struct tagHANDLE { int x1; } *hMediaQueue;
    struct tagHANDLE { int x1; } *hAFRC;
    GKRingBuffer *ringBuf;
    unsigned int lastReceived;
    char *bundleBuffer;
    int bundledPackets;
    int packetsPerBundle;
    int canUseSpecialAACBundle;
    int preferredAudioCodec;
    int preferredAACELDBitRate;
    int audioTxBitrate;
    int audioPayloadBitrate;
    int audioHeaderBitrate;
    int audioBundleHeaderBitrate;
    BOOL useSBR;
    BOOL canBundleAudio;
    BOOL useControlByte;
    BOOL useUEP;
    BOOL _localFeaturesString[1600];
    BOOL _matchedFeaturesString[1600];
    unsigned char inputMeter;
    int packetsSinceLastRTCPReport;
    BOOL audioIsPaused;
    BOOL videoIsPaused;
    unsigned long videoPauseSeq;
    unsigned long audioPauseSeq;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } pauseLock;
    struct dispatch_queue_s { } *videoQueue;
    int audioTimeStampDelta;
    NSArray *mutedPeers;
    int bandwidthUpstream;
    int bandwidthDownstream;
    BOOL allowAudioRecording;
    int aacBlockSize;
    BOOL fInitialBandwidthDetection;
    int carrierBitrateCap;
    struct AudioStreamBasicDescription { 
        double mSampleRate; 
        unsigned int mFormatID; 
        unsigned int mFormatFlags; 
        unsigned int mBytesPerPacket; 
        unsigned int mFramesPerPacket; 
        unsigned int mBytesPerFrame; 
        unsigned int mChannelsPerFrame; 
        unsigned int mBitsPerChannel; 
        unsigned int mReserved; 
    } encodedFormat;
    BOOL shouldDoEncoding;
    double lastReceivedPacketTimestamp;
    BOOL isAttemptingRelay;
    int relayState;
    BOOL allowsRelay;
    BOOL requiresWifi;
    BOOL useCompressedConnectionData;
    int natType;
    unsigned int lastSentAudioSampleTime;
    struct dispatch_source_s { } *pausedAudioHeartBeat;
    TCPTunnelClient *_tcpTunnelClient;
    TimingCollection *perfTimers;
    double packetLossRate;
    double timeLastCheckedNetworkConditions;
    double timeLastKnowGoodNetworkConditions;
    double networkConditionsTimeoutInSeconds;
    NSString *peerCN;
    NSString *sessionID;
    unsigned int roundTripTime;
    float packetLateAndMissingRatio;
    float callerPreEmptiveTimeoutInSecs;
    int sampleLogCount;
    double timeSinceLastReportedNoPackets;
    double noRemotePacketsTimeout;
    BOOL didAttemptSIPInvite;
    NSObject<VideoConferenceChannelQualityDelegate> *qualityDelegate;
    BOOL shouldTimeoutPackets;
    struct _opaque_pthread_mutex_t { 
        long __sig; 
        BOOL __opaque[40]; 
    } srtpLock;
    BOOL didPrepareSRTP;
    BOOL useAFRC;
    VCCallLinkCongestionDetector *congestionDetector;
    BOOL shouldSendAudio;
    BOOL isRemoteDevice4x;
    BOOL isGKVoiceChat;
    int signalStrength;
    int signalRaw;
    int signalGrade;
    boolbBWEstOperatingModeInitialized;
    boolbBWEstNewBWEstModeEnabled;
    boolbBWEstFakeLargeFrameModeEnabled;
    boolbBWEstActiveProbingSenderLog;
    boolbBWEstPeerIsOnIOS;
    struct CGSize { 
        float width; 
        float height; 
    } localScreenPortraitAspectRatio;
    struct CGSize { 
        float width; 
        float height; 
    } localScreenLandscapeAspectRatio;
    struct CGSize { 
        float width; 
        float height; 
    } remoteScreenPortraitAspectRatio;
    struct CGSize { 
        float width; 
        float height; 
    } remoteScreenLandscapeAspectRatio;
    BOOL isStarted;
    NSData *srtpKeyBytes;
    BOOL isInitiator;
    BOOL sentClientSuccessfulDidStart;
    double videoThrottlingTimeout;
}

@property(readonly) BOOL isCaller;
@property(readonly) double networkQuality;
@property(retain) NSData * srtpKeyBytes;
@property BOOL isStarted;
@property struct CGSize { float width; float height; } remoteScreenLandscapeAspectRatio;
@property struct CGSize { float width; float height; } remoteScreenPortraitAspectRatio;
@property struct CGSize { float width; float height; } localScreenLandscapeAspectRatio;
@property struct CGSize { float width; float height; } localScreenPortraitAspectRatio;
@property BOOL shouldSendAudio;
@property BOOL useAFRC;
@property BOOL shouldTimeoutPackets;
@property(copy) NSString * sessionID;
@property float packetLateAndMissingRatio;
@property NSObject<VideoConferenceChannelQualityDelegate> * qualityDelegate;
@property int signalGrade;
@property int signalRaw;
@property int signalStrength;
@property unsigned int roundTripTime;
@property double networkConditionsTimeoutInSeconds;
@property double packetLossRate;
@property(copy) NSString * peerCN;
@property int audioTimeStampDelta;
@property unsigned int lastSentAudioSampleTime;
@property int natType;
@property BOOL requiresWifi;
@property BOOL isGKVoiceChat;
@property(readonly) BOOL audioIsPaused;
@property(readonly) BOOL videoIsPaused;
@property(readonly) int audioBundleHeaderBitrate;
@property(readonly) int audioHeaderBitrate;
@property(retain) NSArray * mutedPeers;
@property int bandwidthDownstream;
@property int bandwidthUpstream;
@property BOOL useCompressedConnectionData;
@property unsigned char inputMeter;
@property BOOL useUEP;
@property BOOL useControlByte;
@property int preferredAudioCodec;
@property BOOL canBundleAudio;
@property int packetsPerBundle;
@property int bundledPackets;
@property(readonly) char * bundleBuffer;
@property unsigned int lastReceived;
@property(retain) GKRingBuffer * ringBuf;
@property struct tagHANDLE { int x1; }* hAFRC;
@property struct tagHANDLE { int x1; }* hMediaQueue;
@property int numBufferBytesAvailable;
@property int numEncodedBytes;
@property struct tagHANDLE { int x1; }* decodeHandle;
@property struct tagHANDLE { int x1; }* encodeHandle;
@property NSObject<VideoConferenceRealTimeChannel> * rtChannel;
@property BOOL receivedSIPInvite;
@property BOOL isWaitingForICEResult;
@property(readonly) BOOL isAudioRunning;
@property(retain) NSObject<VCCallSessionDelegate> * delegate;
@property int samplesPerFrame;
@property int sampleRate;
@property int payload;
@property int videoPayload;
@property int audioBundle;
@property BOOL didUseICE;
@property int state;
@property struct tagCONNRESULT { int iCallID; int iRemoteCallID; int proto; int bIfRelay; unsigned short wRelayServType; unsigned short wChannelNumber; struct tagIPPORT { int iFlags; BOOL szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } mbLocal; struct tagIPPORT { int iFlags; BOOL szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } mbRemote; struct tagIPPORT { int iFlags; BOOL szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } mbSrc; struct tagIPPORT { int iFlags; BOOL szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } mbDst; struct tagIPPORT { int iFlags; BOOL szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } mbRemoteSrc; struct tagIPPORT { int iFlags; BOOL szIfName[16]; union { unsigned int dwIPv4; unsigned char abIPv6[16]; } IP; unsigned short wPort; } mbRelayExt; unsigned int dwRTT; int bIfLocalCellularQoS; int bIfRemoteCellularQoS; int iLocalCellTech; int iRemoteCellTech; } connectionResult;
@property struct tagHANDLE { int x1; }* rtpHandle;
@property(retain) VCCallInfo * remoteCallInfo;
@property(retain) VCCallInfo * localCallInfo;

+ (id)keyPathsForValuesAffectingNetworkQuality;

- (void)setDelegate:(id)arg1;
- (void)unlock;
- (void)lock;
- (void)setState:(int)arg1;
- (int)state;
- (id)delegate;
- (unsigned int)connectionResultCallback:(struct tagCONNRESULT { int x1; int x2; int x3; int x4; unsigned short x5; unsigned short x6; struct tagIPPORT { int x_7_1_1; BOOL x_7_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { int x_8_1_1; BOOL x_8_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; unsigned int x13; int x14; int x15; int x16; int x17; }*)arg1 didReceiveICEPacket:(BOOL)arg2 didUseRelay:(BOOL)arg3;
- (int)sipCallback:(int)arg1 callID:(int)arg2 msgIn:(const char *)arg3 msgOut:(char *)arg4 optional:(void*)arg5 confIndex:(int*)arg6;
- (void)doSipEndProc:(id)arg1;
- (void)setUseAFRC:(BOOL)arg1;
- (BOOL)isBetterForIncomingSIPThanOtherSession:(id)arg1;
- (void)handleCellDowngrade:(BOOL)arg1;
- (void)setQualityDelegate:(id)arg1;
- (void)timeoutUnfinishedConnection;
- (int)encodeAudio:(void*)arg1 numInputBytes:(int)arg2 outputBytes:(void*)arg3 numOutputBytes:(int)arg4;
- (BOOL)bundleAudio:(void*)arg1 numInputBytes:(int)arg2;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(int)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 doEncoding:(BOOL)arg6 error:(id*)arg7;
- (BOOL)updateRTCPReport;
- (int)rtcpDescriptor;
- (BOOL)createConnectionDataForParticipantID:(id)arg1 pCallID:(int*)arg2 error:(id*)arg3;
- (void)setShouldSendAudio:(BOOL)arg1;
- (BOOL)setPauseAudio:(BOOL)arg1 error:(id*)arg2;
- (BOOL)setPauseVideo:(BOOL)arg1 error:(id*)arg2;
- (void)processRelayRequestResponseDict:(id)arg1 didOriginateRequest:(BOOL)arg2;
- (void)processRelayUpdateDict:(id)arg1 didOriginateRequest:(BOOL)arg2;
- (void)processCancelRelayRequest:(id)arg1 didOriginateRequest:(BOOL)arg2;
- (void)updateVideoThrottleDuration:(double)arg1;
- (id)srtpKeyBytes;
- (void)setSrtpKeyBytes:(id)arg1;
- (BOOL)isStarted;
- (void)setIsStarted:(BOOL)arg1;
- (struct CGSize { float x1; float x2; })remoteScreenLandscapeAspectRatio;
- (void)setRemoteScreenLandscapeAspectRatio:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })remoteScreenPortraitAspectRatio;
- (void)setRemoteScreenPortraitAspectRatio:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })localScreenLandscapeAspectRatio;
- (void)setLocalScreenLandscapeAspectRatio:(struct CGSize { float x1; float x2; })arg1;
- (struct CGSize { float x1; float x2; })localScreenPortraitAspectRatio;
- (void)setLocalScreenPortraitAspectRatio:(struct CGSize { float x1; float x2; })arg1;
- (BOOL)shouldSendAudio;
- (BOOL)useAFRC;
- (BOOL)shouldTimeoutPackets;
- (void)setShouldTimeoutPackets:(BOOL)arg1;
- (id)sessionID;
- (void)setSessionID:(id)arg1;
- (void)setPacketLateAndMissingRatio:(float)arg1;
- (id)qualityDelegate;
- (void)setSignalGrade:(int)arg1;
- (void)setSignalRaw:(int)arg1;
- (void)setSignalStrength:(int)arg1;
- (void)setRoundTripTime:(unsigned int)arg1;
- (double)networkConditionsTimeoutInSeconds;
- (void)setNetworkConditionsTimeoutInSeconds:(double)arg1;
- (void)setPacketLossRate:(double)arg1;
- (id)peerCN;
- (void)setPeerCN:(id)arg1;
- (int)audioTimeStampDelta;
- (void)setAudioTimeStampDelta:(int)arg1;
- (unsigned int)lastSentAudioSampleTime;
- (void)setLastSentAudioSampleTime:(unsigned int)arg1;
- (void)setNatType:(int)arg1;
- (BOOL)isGKVoiceChat;
- (void)setIsGKVoiceChat:(BOOL)arg1;
- (BOOL)audioIsPaused;
- (BOOL)videoIsPaused;
- (int)audioBundleHeaderBitrate;
- (int)audioHeaderBitrate;
- (id)mutedPeers;
- (void)setMutedPeers:(id)arg1;
- (int)bandwidthDownstream;
- (void)setBandwidthDownstream:(int)arg1;
- (void)setBandwidthUpstream:(int)arg1;
- (BOOL)useCompressedConnectionData;
- (void)setUseCompressedConnectionData:(BOOL)arg1;
- (unsigned char)inputMeter;
- (void)setInputMeter:(unsigned char)arg1;
- (BOOL)canBundleAudio;
- (void)setCanBundleAudio:(BOOL)arg1;
- (int)packetsPerBundle;
- (int)bundledPackets;
- (void)setBundledPackets:(int)arg1;
- (char *)bundleBuffer;
- (unsigned int)lastReceived;
- (void)setLastReceived:(unsigned int)arg1;
- (id)ringBuf;
- (void)setRingBuf:(id)arg1;
- (struct tagHANDLE { int x1; }*)hAFRC;
- (void)setHAFRC:(struct tagHANDLE { int x1; }*)arg1;
- (struct tagHANDLE { int x1; }*)hMediaQueue;
- (void)setHMediaQueue:(struct tagHANDLE { int x1; }*)arg1;
- (int)numBufferBytesAvailable;
- (void)setNumBufferBytesAvailable:(int)arg1;
- (int)numEncodedBytes;
- (void)setNumEncodedBytes:(int)arg1;
- (struct tagHANDLE { int x1; }*)decodeHandle;
- (void)setDecodeHandle:(struct tagHANDLE { int x1; }*)arg1;
- (struct tagHANDLE { int x1; }*)encodeHandle;
- (void)setEncodeHandle:(struct tagHANDLE { int x1; }*)arg1;
- (id)rtChannel;
- (void)setRtChannel:(id)arg1;
- (BOOL)receivedSIPInvite;
- (void)setReceivedSIPInvite:(BOOL)arg1;
- (BOOL)isWaitingForICEResult;
- (void)setIsWaitingForICEResult:(BOOL)arg1;
- (BOOL)isAudioRunning;
- (int)samplesPerFrame;
- (void)setSamplesPerFrame:(int)arg1;
- (int)sampleRate;
- (void)setSampleRate:(int)arg1;
- (int)payload;
- (void)setPayload:(int)arg1;
- (int)videoPayload;
- (void)setVideoPayload:(int)arg1;
- (int)audioBundle;
- (void)setAudioBundle:(int)arg1;
- (void)setDidUseICE:(BOOL)arg1;
- (struct tagCONNRESULT { int x1; int x2; int x3; int x4; unsigned short x5; unsigned short x6; struct tagIPPORT { int x_7_1_1; BOOL x_7_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { int x_8_1_1; BOOL x_8_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; unsigned int x13; int x14; int x15; int x16; int x17; })connectionResult;
- (void)setConnectionResult:(struct tagCONNRESULT { int x1; int x2; int x3; int x4; unsigned short x5; unsigned short x6; struct tagIPPORT { int x_7_1_1; BOOL x_7_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_7_1_3; unsigned short x_7_1_4; } x7; struct tagIPPORT { int x_8_1_1; BOOL x_8_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_8_1_3; unsigned short x_8_1_4; } x8; struct tagIPPORT { int x_9_1_1; BOOL x_9_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_9_1_3; unsigned short x_9_1_4; } x9; struct tagIPPORT { int x_10_1_1; BOOL x_10_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_10_1_3; unsigned short x_10_1_4; } x10; struct tagIPPORT { int x_11_1_1; BOOL x_11_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_11_1_3; unsigned short x_11_1_4; } x11; struct tagIPPORT { int x_12_1_1; BOOL x_12_1_2[16]; union { unsigned int x_3_2_1; unsigned char x_3_2_2[16]; } x_12_1_3; unsigned short x_12_1_4; } x12; unsigned int x13; int x14; int x15; int x16; int x17; })arg1;
- (struct tagHANDLE { int x1; }*)rtpHandle;
- (void)setRtpHandle:(struct tagHANDLE { int x1; }*)arg1;
- (id)remoteCallInfo;
- (void)setRemoteCallInfo:(id)arg1;
- (void)setLocalCallInfo:(id)arg1;
- (BOOL)didUseICE;
- (id)localCallInfo;
- (BOOL)isCallOngoing;
- (void)sendCellCondition:(BOOL)arg1;
- (BOOL)disconnect:(id)arg1 didRemoteCancel:(BOOL)arg2;
- (int)bandwidthUpstream;
- (double)packetLossRate;
- (float)packetLateAndMissingRatio;
- (int)signalStrength;
- (int)signalRaw;
- (int)signalGrade;
- (void)updateLastReceivedPacketWithTimestamp:(double)arg1;
- (void)sendTimings;
- (void)resetLoopback;
- (BOOL)startConnectionWithParticipantID:(id)arg1 callID:(int)arg2 usingBlob:(id)arg3 isCaller:(BOOL)arg4 capabilities:(id)arg5 doEncoding:(BOOL)arg6 useRelay:(BOOL)arg7 error:(id*)arg8;
- (void)reportDashboardEndResult;
- (void)cleanupMedia;
- (void)notifyDelegateAndEndCall:(int)arg1 didRemoteCancel:(BOOL)arg2 error:(id)arg3;
- (BOOL)createConnectionDataForParticipantID:(id)arg1 pCallID:(int*)arg2 error:(id*)arg3 useRelay:(BOOL)arg4;
- (void)calculateAudioTxBitrate;
- (void)stopPausedHeartbeat;
- (BOOL)startAudio:(id*)arg1;
- (void)startPausedHeartbeat;
- (BOOL)setPauseAudio:(BOOL)arg1 force:(BOOL)arg2 error:(id*)arg3;
- (BOOL)startVideo:(BOOL)arg1 error:(id*)arg2;
- (BOOL)stopVideo:(BOOL)arg1 error:(id*)arg2;
- (BOOL)setPauseVideo:(BOOL)arg1 force:(BOOL)arg2 error:(id*)arg3;
- (void)deleteTCPTunnel;
- (BOOL)createTCPTunnelForParticipantID:(id)arg1 relayDictionary:(id)arg2 didOriginateRequest:(BOOL)arg3 relayType:(unsigned char)arg4 error:(id*)arg5;
- (id)createRelayUpdateDictionary:(id)arg1;
- (BOOL)handshakeComplete:(struct SSLContext { }*)arg1 withError:(struct __CFError {}**)arg2;
- (void)setupLoopback;
- (BOOL)stillWantsToRelay;
- (void)sipConnectThreadProc:(id)arg1;
- (void)logConnectionSuccess;
- (void)initiateRelayRequest;
- (void)inviteeICEResultTimer:(float)arg1 shouldBailIfRelay:(BOOL)arg2;
- (void)updateLastReceivedPacket:(BOOL)arg1;
- (void)connectionResultFromSIP:(struct tagSIPCallbackData { void *x1; struct tagCONNRESULT { int x_2_1_1; int x_2_1_2; int x_2_1_3; int x_2_1_4; unsigned short x_2_1_5; unsigned short x_2_1_6; struct tagIPPORT { int x_7_2_1; BOOL x_7_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_7_2_3; unsigned short x_7_2_4; } x_2_1_7; struct tagIPPORT { int x_8_2_1; BOOL x_8_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_8_2_3; unsigned short x_8_2_4; } x_2_1_8; struct tagIPPORT { int x_9_2_1; BOOL x_9_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_9_2_3; unsigned short x_9_2_4; } x_2_1_9; struct tagIPPORT { int x_10_2_1; BOOL x_10_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_10_2_3; unsigned short x_10_2_4; } x_2_1_10; struct tagIPPORT { int x_11_2_1; BOOL x_11_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_11_2_3; unsigned short x_11_2_4; } x_2_1_11; struct tagIPPORT { int x_12_2_1; BOOL x_12_2_2[16]; union { unsigned int x_3_3_1; unsigned char x_3_3_2[16]; } x_12_2_3; unsigned short x_12_2_4; } x_2_1_12; unsigned int x_2_1_13; int x_2_1_14; int x_2_1_15; int x_2_1_16; int x_2_1_17; } x2; int x3; }*)arg1;
- (int)handleIncomingWithCallID:(int)arg1 msgIn:(const char *)arg2 msgOut:(char *)arg3 optional:(void*)arg4 confIndex:(int*)arg5 error:(id*)arg6;
- (BOOL)doBandwidthDetection:(struct tagHANDLE { int x1; }*)arg1 error:(id*)arg2;
- (BOOL)startMediaQueue:(id*)arg1;
- (void)processSIPMessage:(char *)arg1 msgOut:(char *)arg2 optional:(void*)arg3 confIndex:(int*)arg4;
- (void)notifyDelegateSessionStarted;
- (void)shutdownVoiceChatFromRemoteSIPSignal:(int)arg1;
- (void)setupDTLSDefaults;
- (void)setLocalIdentityForKeyExchange;
- (BOOL)isCaller;
- (struct __SecIdentity { }*)retreiveIdentity;
- (void)logIdentity:(struct __SecIdentity { }*)arg1;
- (int)calculateSIPEndAction:(BOOL)arg1 currentState:(int)arg2 error:(id)arg3;
- (void)doSipEndAction:(int)arg1 callID:(int)arg2 error:(id)arg3;
- (void)stopAudio;
- (BOOL)stopMediaQueue:(id*)arg1;
- (BOOL)stopAFRC:(id*)arg1;
- (void)stopLoopback;
- (void)remotePauseDidChangeToState:(BOOL)arg1 withSequence:(unsigned long)arg2 forVideo:(BOOL)arg3;
- (void)remoteBitrateStateUpdate:(BOOL)arg1 withSequence:(unsigned long)arg2;
- (char *)localFeaturesString;
- (unsigned int)getAudioRTPID;
- (unsigned int)getVideoRTPID;
- (void)resetState;
- (BOOL)createRTPHandles:(id*)arg1;
- (BOOL)createMediaQueueHandle:(id*)arg1;
- (BOOL)negotiatePayloadWithError:(id*)arg1;
- (BOOL)setRTPDestinationWithError:(id*)arg1;
- (BOOL)setRTPPayloadWithError:(id*)arg1;
- (BOOL)negotiateMaxBandwidth:(int*)arg1;
- (BOOL)createSDP:(int*)arg1 audioPayloadCount:(int)arg2 videoPayloadTypes:(int*)arg3 videoPayloadCount:(int)arg4 maxBandwidth:(int)arg5 imageSizesSend:(struct imageTag { int x1; int x2; int x3; int x4; int x5; int x6; int x7; }*)arg6 imageSendCount:(int)arg7 imageSizesRecv:(struct imageTag { int x1; int x2; int x3; int x4; int x5; int x6; int x7; }*)arg8 imageRecvCount:(int)arg9 sdp:(char *)arg10 numSDPBytes:(int*)arg11 error:(id*)arg12;
- (void)launchDeadlineExitTimer;
- (BOOL)getForcedPayload:(int*)arg1;
- (void)getAllPayloadsForAudio:(int**)arg1 count:(int*)arg2;
- (void)getAllPayloadsForVideo:(int**)arg1 count:(int*)arg2;
- (BOOL)is3GCall;
- (BOOL)setMatchedFeaturesString:(char *)arg1 remoteFeaturesString:(char *)arg2;
- (char *)matchedFeaturesString;
- (BOOL)findFeatureString:(char *)arg1 value:(char *)arg2 withPrefix:(char *)arg3;
- (long)Conference_SetBWEstMode:(bool)arg1 bFakeLargeFrameMode:(bool)arg2;
- (BOOL)choosePayload:(int*)arg1 count:(int)arg2;
- (BOOL)chooseVideoPayload:(int*)arg1 count:(int)arg2;
- (BOOL)startAFRC:(id*)arg1;
- (void)setUseControlByte:(BOOL)arg1;
- (void)setUseUEP:(BOOL)arg1;
- (BOOL)startRTPWithError:(id*)arg1;
- (BOOL)sendSIPInviteWithError:(id*)arg1;
- (BOOL)setupCallerRTPChannelWithError:(id*)arg1;
- (void)stopAudioIOProc:(id)arg1;
- (BOOL)setupAudioEncoder;
- (BOOL)allocateBundleBuffer;
- (BOOL)setupAudioCookies;
- (void)setPacketsPerBundle:(int)arg1;
- (void)setupAACELDBitrate;
- (void)setAudioBitrate:(int)arg1;
- (void)getVideoSettings:(int)arg1 width:(int*)arg2 height:(int*)arg3 framerate:(int*)arg4 bitRate:(int*)arg5;
- (void)adjustBitrateForConnectionType;
- (BOOL)useUEP;
- (BOOL)useControlByte;
- (void)setupAACELDPayload;
- (BOOL)setupAudioCodec;
- (BOOL)sipConnectWithError:(id*)arg1;
- (void)stopLoopbackProc:(id)arg1;
- (void)pullLocalCellCondition;
- (id)createInitiateRelayDictionary;
- (unsigned int)maxBitrateForConnectionType;
- (unsigned int)connectionType;
- (void)loopbackSocketTunnel:(id)arg1 receivedData:(id)arg2 from:(struct tagIPPORT { int x1; BOOL x2[16]; union { unsigned int x_3_1_1; unsigned char x_3_1_2[16]; } x3; unsigned short x4; }*)arg3;
- (void)setPreferredAudioCodec:(int)arg1;
- (int)preferredAudioCodec;
- (BOOL)requiresWifi;
- (void)setRequiresWifi:(BOOL)arg1;
- (void)receivedRealTimeData:(id)arg1 fromParticipantID:(id)arg2;
- (double)networkQuality;
- (unsigned int)roundTripTime;
- (int)natType;
- (id)description;
- (id)init;
- (void)dealloc;

@end
