/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/FTServices.framework/FTServices
 */

@class NSURLConnection, NSMutableData, NSMutableURLRequest, NSData, NSDate, NSNumber, NSDictionary, NSString, NSURL, IMConnectionMonitor, NSURLResponse;

@interface FTServerBag : NSObject  {
    IMConnectionMonitor *_connectionMonitor;
    NSURL *_bagURL;
    NSString *_apsEnvironmentName;
    NSDictionary *_bag;
    NSDictionary *_cachedBag;
    NSMutableURLRequest *_urlRequest;
    NSMutableData *_currentResponseData;
    NSURLResponse *_currentResponse;
    NSURLConnection *_currentURLConnection;
    struct dispatch_queue_s { } *_bagQueue;
    int _trustStatus;
    NSData *_certData;
    NSString *_cachedHash;
    NSDate *_loadDate;
    NSNumber *_cacheTime;
    BOOL _allowSelfSignedCertificates;
    BOOL _allowUnsignedBags;
}

@property(retain) NSURL * bagURL;
@property(retain) NSString * apsEnvironmentName;
@property BOOL allowSelfSignedCertificates;
@property BOOL allowUnsignedBags;
@property(readonly) BOOL isLoaded;
@property(readonly) BOOL isLoading;
@property(readonly) BOOL isServerAvailable;
@property(retain) IMConnectionMonitor * _connectionMonitor;
@property(setter=_setBag:,retain) NSDictionary * _bag;
@property(setter=_setCachedBag:,retain) NSDictionary * _cachedBag;
@property(retain) NSMutableURLRequest * _urlRequest;
@property(retain) NSString * _cachedHash;
@property(retain) NSMutableData * _currentResponseData;
@property(retain) NSDate * _loadDate;
@property(retain) NSNumber * _cacheTime;
@property(retain) NSURLResponse * _currentResponse;
@property NSURLConnection * _currentURLConnection;
@property struct dispatch_queue_s { }* _bagQueue;
@property(setter=_setTrustStatus:) int _trustStatus;
@property(retain) NSData * _certData;

+ (id)sharedInstanceForBagType:(int)arg1;
+ (id)_sharedInstance;
+ (id)_sharedInstanceForClass:(Class)arg1;
+ (id)_bagCreationLock;
+ (id)sharedInstance;

- (id)bagURL;
- (id)apsEnvironmentName;
- (void)connectionMonitorDidUpdate:(id)arg1;
- (void)_invalidate;
- (BOOL)isLoaded;
- (void)connection:(id)arg1 didReceiveResponse:(id)arg2;
- (void)connectionDidFinishLoading:(id)arg1;
- (void)connection:(id)arg1 didReceiveData:(id)arg2;
- (void)connection:(id)arg1 didFailWithError:(id)arg2;
- (BOOL)isLoading;
- (id)_loadDate;
- (void)setAllowUnsignedBags:(BOOL)arg1;
- (BOOL)allowUnsignedBags;
- (void)setAllowSelfSignedCertificates:(BOOL)arg1;
- (BOOL)allowSelfSignedCertificates;
- (void)set_cacheTime:(id)arg1;
- (void)set_loadDate:(id)arg1;
- (void)set_cachedHash:(id)arg1;
- (id)_cachedHash;
- (void)set_certData:(id)arg1;
- (id)_certData;
- (void)set_bagQueue:(struct dispatch_queue_s { }*)arg1;
- (struct dispatch_queue_s { }*)_bagQueue;
- (void)set_currentURLConnection:(id)arg1;
- (id)_currentURLConnection;
- (void)set_currentResponse:(id)arg1;
- (id)_currentResponse;
- (void)set_currentResponseData:(id)arg1;
- (id)_currentResponseData;
- (void)set_urlRequest:(id)arg1;
- (id)_urlRequest;
- (void)setApsEnvironmentName:(id)arg1;
- (void)setBagURL:(id)arg1;
- (void)set_connectionMonitor:(id)arg1;
- (id)_connectionMonitor;
- (void)reloadBag;
- (id)_initWithURL:(id)arg1 apsEnvironmentName:(id)arg2 allowSelfSignedCertificates:(BOOL)arg3 allowUnsignedBags:(BOOL)arg4;
- (void)_processBagResultData:(id)arg1 response:(id)arg2 inBackground:(BOOL)arg3;
- (void)_cancelCurrentLoad;
- (void)_startBagLoad;
- (BOOL)isServerAvailable;
- (BOOL)_loadFromSignedDictionary:(id)arg1 returningError:(id*)arg2;
- (BOOL)_loadFromDictionary:(id)arg1 returningError:(id*)arg2;
- (int)_trustStatus;
- (BOOL)_allowInvalid;
- (void)_saveToCache;
- (void)_loadFromCache;
- (void)_saveCacheToPrefs;
- (id)_cachedBag;
- (void)__saveCacheToPrefs;
- (void)_clearCache;
- (void)_setTrustStatus:(int)arg1;
- (void)_setBag:(id)arg1;
- (void)_setCachedBag:(id)arg1;
- (id)_bag;
- (id)_bagDefaultsDomain;
- (id)_cacheTime;
- (id)objectForKey:(id)arg1;
- (void)dealloc;
- (void)startBagLoad;
- (id)urlWithKey:(id)arg1;

@end
