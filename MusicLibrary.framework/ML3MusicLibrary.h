/* Generated by RuntimeBrowser.
   Image: /System/Library/PrivateFrameworks/MusicLibrary.framework/MusicLibrary
 */

@class ML3NondurableWriteSet, ML3MusicLibrary_SQLiteDatabaseContext, ML3UbiquitousDatabase, NSMutableArray, NSString, ML3DatabaseMetadata, ML3Container, NSArray;

@interface ML3MusicLibrary : NSObject  {
    ML3MusicLibrary_SQLiteDatabaseContext *_mainDatabaseContext;
    ML3MusicLibrary_SQLiteDatabaseContext *_backgroundDatabaseContext;
    ML3UbiquitousDatabase *_ubiquitousDatabase;
    struct dispatch_queue_s { } *_backgroundQueue;
    struct _opaque_pthread_t { long x1; struct __darwin_pthread_handler_rec {} *x2; BOOL x3[596]; } *_backgroundQueueOwner;
    NSString *_path;
    NSMutableArray *_pendingNotifyPostNames;
    NSString *_notifyName;
    int _notifyToken;
    NSString *_nonContentsNotifyName;
    int _nonContentsNotifyToken;
    NSString *_displayValuesNotifyName;
    int _displayValuesNotifyToken;
    NSString *_syncGenerationNotifyName;
    int _syncGenerationNotifyToken;
    BOOL _enableWrites;
    BOOL _requiresProcessAssertion;
    int _backupDisabledCount;
    BOOL _backupNeeded;
    BOOL _hasEverConnectedToDatabase;
    id _mcSettingsObserver;
    struct dispatch_queue_s { } *_artworkQueue;
    int _artworkBlobFD;
    struct dispatch_queue_s { } *_nondurableConcurrentQueue;
    ML3NondurableWriteSet *_nondurableWriteSet;
}

@property(readonly) NSString * path;
@property(readonly) BOOL writable;
@property(getter=isNondurableWritingActive,readonly) BOOL nondurableWritingActive;
@property(readonly) NSArray * localizedSectionIndexTitles;
@property(readonly) ML3Container * purchasedTracksPlaylist;
@property(readonly) ML3DatabaseMetadata * databaseInfo;
@property(readonly) NSArray * preferredAudioTracks;
@property(readonly) NSArray * preferredSubtitleTracks;
@property(readonly) BOOL mediaRestrictionEnabled;
@property(readonly) BOOL requiresPostProcessing;
@property(readonly) BOOL hasEverConnectedToDatabase;
@property(readonly) long long persistentID;
@property(readonly) long long currentRevision;
@property long long syncGenerationID;
@property(readonly) long long autoFilledTracksTotalSize;

+ (BOOL)dropIndexesUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)schemaExactlyMatchesSystemUsingHandle:(struct sqlite3 { }*)arg1;
+ (id)itemSchemaSQL;
+ (id)sortMapSchemaSQL;
+ (id)storeLinkSchemaSQL;
+ (BOOL)createIndexesUsingHandle:(struct sqlite3 { }*)arg1;
+ (id)indexSchemaSQL;
+ (BOOL)dropIndexesUsingHandle:(struct sqlite3 { }*)arg1 tableNames:(const char *)arg2;
+ (int)currentUserVersion;
+ (id)itemIndexSchemaSQL;
+ (BOOL)migrateToCurrentUserVersionUsingHandle:(struct sqlite3 { }*)arg1;
+ (int)userVersionUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)buildDatabaseTablesUsingHandle:(struct sqlite3 { }*)arg1 usingTransaction:(BOOL)arg2;
+ (id)allSchemaSQL;
+ (unsigned int)readableArtworkFormatIDForArtworkFormatID:(unsigned int)arg1;
+ (void)enumerateSortMapTablesUsingBlock:(id)arg1;
+ (id)sectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionIndexTitleForSectionHeader:(id)arg1;
+ (id)localizedSectionHeaderForSectionHeader:(id)arg1;
+ (struct sqlite3 { }*)openedDatabaseHandleForPath:(id)arg1 enableWrites:(BOOL)arg2;
+ (void)setImportationEnabled:(BOOL)arg1;
+ (BOOL)importationEnabled;
+ (struct MLArtworkFormatSpec { unsigned int x1; unsigned int x2; unsigned int x3; unsigned int x4; int x5; int x6; })artworkFormatSpecForArtworkFormatID:(unsigned int)arg1;
+ (id)_autoFillTrackPredicate;
+ (BOOL)updateSortMapOnHandle:(struct sqlite3 { }*)arg1 usingTransaction:(BOOL)arg2;
+ (id)systemCurrentLanguage;
+ (BOOL)executeSQL:(id)arg1 usingHandle:(struct sqlite3 { }*)arg2 waitIfBusy:(BOOL)arg3;
+ (void)_stepStatement:(struct sqlite3_stmt { }*)arg1 hasRow:(BOOL*)arg2 didFinish:(BOOL*)arg3;
+ (BOOL)orderingLanguageMatchesSystemUsingHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)userVersionMatchesSystemUsingHandle:(struct sqlite3 { }*)arg1;
+ (struct sqlite3 { }*)_openedDatabaseHandleForPath:(id)arg1 enableWrites:(BOOL)arg2 forLibrary:(id)arg3;
+ (BOOL)executeSQL:(id)arg1 usingHandle:(struct sqlite3 { }*)arg2;
+ (void)closeDatabaseHandle:(struct sqlite3 { }*)arg1;
+ (BOOL)statementDidFinishAfterStepping:(struct sqlite3_stmt { }*)arg1;
+ (BOOL)statementHasRowAfterStepping:(struct sqlite3_stmt { }*)arg1;
+ (id)mainDatabasePath;
+ (id)sharedLibrary;
+ (id)sectionIndexTitles;
+ (void)initialize;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3;
+ (void)buildDatabaseFromHomeSharingConnection:(id)arg1 atPath:(id)arg2 completionHandler:(id)arg3 progressHandler:(id)arg4;

- (long long)persistentID;
- (id)locationKindForKind:(id)arg1;
- (BOOL)resetAllContents;
- (id)_insertStringsIntoSortMapOrFail:(id)arg1;
- (BOOL)populateArtworkCacheWithArtworkData:(id)arg1 trackValues:(id)arg2;
- (BOOL)coerceValidDatabase;
- (BOOL)buildDatabaseTables;
- (BOOL)deleteAndRecreateDatabaseUsingHandle:(struct sqlite3 {}**)arg1;
- (void)updateOrderingLanguagesForCurrentLanguage;
- (BOOL)updateActivePlaylistNamesForCurrentLanguage;
- (id)albumArtistForEffectiveAlbumArtistName:(id)arg1;
- (id)composerForComposerName:(id)arg1;
- (id)insertStringsIntoSortMap:(id)arg1;
- (id)genreForGenre:(id)arg1;
- (id)albumForAlbumArtistPersistentID:(long long)arg1 albumName:(id)arg2 feedURL:(id)arg3 seasonNumber:(id)arg4 compilation:(BOOL)arg5;
- (id)artistForArtistName:(id)arg1 seriesName:(id)arg2;
- (void)removeOrphanedTracks;
- (void)applyUbiquitousBookmarksToTrack:(id)arg1;
- (void)updateUbiquitousBookmarksFromTrack:(id)arg1;
- (double)timestampForAppliedUbiquitousBookmarkKey:(id)arg1;
- (id)appleIDForDSID:(unsigned long long)arg1;
- (BOOL)setAppleID:(id)arg1 forDSID:(unsigned long long)arg2;
- (BOOL)deleteAllArtwork;
- (BOOL)insertArtworkWithImageData:(id)arg1 forCacheID:(id)arg2;
- (BOOL)hasArtworkForCacheID:(id)arg1;
- (void)loadArtworkForCacheID:(id)arg1 formatID:(unsigned int)arg2 completionHandler:(id)arg3;
- (long long)deleteAutoFilledTracksOfAtLeastTotalSize:(long long)arg1;
- (long long)autoFilledTracksTotalSize;
- (void)enumeratePersistentIDsAfterRevision:(long long)arg1 usingBlock:(id)arg2;
- (long long)syncGenerationID;
- (void)setSyncGenerationID:(long long)arg1;
- (long long)currentRevision;
- (BOOL)updateSortMap;
- (long long)addStringToSortMap:(id)arg1;
- (BOOL)_mustProcessLanguageChange;
- (BOOL)mediaRestrictionEnabled;
- (void)savePlaylists;
- (void)saveTrackMetadata;
- (id)preferredSubtitleTracks;
- (id)preferredAudioTracks;
- (id)purchasedTracksPlaylist;
- (void)notifyDisplayValuesPropertyDidChange;
- (unsigned int)sectionIndexTitleIndexForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionHeaderForSectionIndex:(unsigned int)arg1;
- (id)localizedSectionIndexTitles;
- (void)performTransactionKind:(int)arg1 withBlock:(id)arg2;
- (void)performTransactionAllowingWrites:(BOOL)arg1 withBlock:(id)arg2;
- (id)groupingKeyForString:(id)arg1;
- (BOOL)populateStaticItemsOfDynamicContainers;
- (BOOL)writable;
- (void)migratePresignedValidity;
- (void)updateUbiquitousBookmarksWithKey:(id)arg1 bookmarkTime:(id)arg2 timestamp:(double)arg3;
- (void)_accessAccountCacheDBForSQL:(id)arg1 usingBlock:(id)arg2;
- (BOOL)deleteArtworkForCacheID:(id)arg1;
- (BOOL)_insertImageBytes:(const void*)arg1 length:(unsigned long)arg2 forCacheID:(id)arg3 formatID:(unsigned int)arg4 imageSubRect:(struct CGRect { struct CGPoint { float x_1_1_1; float x_1_1_2; } x1; struct CGSize { float x_2_1_1; float x_2_1_2; } x2; })arg5;
- (void)_accessArtworkBlobFDWithBlock:(id)arg1;
- (BOOL)compactArtwork;
- (BOOL)setValue:(id)arg1 forDatabaseProperty:(id)arg2;
- (long long)insertStringIntoSortMapNoTransaction:(id)arg1;
- (struct { long long x1; int x2; })nameOrderForString:(id)arg1;
- (id)valueForDatabaseProperty:(id)arg1;
- (void)_delayableNotifyPost:(id)arg1;
- (void)savePlaylistsSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (void)saveTrackMetadataSinceRevision:(long long)arg1 withGrappaID:(unsigned int)arg2;
- (id)databaseInfo;
- (void)_scheduleCommitNondurableWritesAfterTimeInterval:(double)arg1;
- (BOOL)_commitNondurableWrites;
- (void)incrementalVaccuumIfAppropriate;
- (void)_postDisplayValuesChangeNotificationLocalOnly:(BOOL)arg1;
- (void)_postNonContentsChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)_postChangeNotificationAndScheduleFlushLocalOnly:(BOOL)arg1;
- (void)performTransactionKind:(int)arg1 waitIfBusy:(BOOL)arg2 withBlock:(id)arg3;
- (void)accessSortKeyBuilder:(id)arg1;
- (void)_dispatchBackgroundSynchronouslyUsingBlock:(id)arg1;
- (id)backgroundQueue_backgroundDatabaseContext;
- (id)mainDatabaseContext;
- (void)_dispatchBackgroundAsynchronouslyUsingBlock:(id)arg1;
- (void)reconnectBackgroundDatabaseContext;
- (void)reconnectMainDatabaseContext;
- (void)_onBackgroundQueuePerformBlock:(id)arg1;
- (struct sqlite3 { }*)openedDatabaseHandle;
- (void)_accessDatabaseContextUsingBlock:(id)arg1;
- (id)ubiquitousDatabase;
- (void)updateTrackIntegrity;
- (void)reconnectToDatabase;
- (BOOL)executeSQL:(id)arg1;
- (BOOL)createIndexes;
- (BOOL)dropItemIndexes;
- (void)prepareStatementForSQLPrefix:(id)arg1 inPersistentIDs:(const long long*)arg2 count:(unsigned int)arg3 usingBlock:(id)arg4;
- (void)notifyNonContentsPropertyDidChange;
- (id)nondurableWriteSetForReading;
- (void)notifyContentsDidChange;
- (id)nondurableWriteSetForWriting;
- (BOOL)isNondurableWritingActive;
- (void)prepareStatementForSQL:(id)arg1 cache:(BOOL)arg2 usingBlock:(id)arg3;
- (void)performTransactionWithBlock:(id)arg1;
- (void)accessDatabaseUsingBlock:(id)arg1;
- (void)prepareStatementForSQL:(id)arg1 usingBlock:(id)arg2;
- (id)initWithPath:(id)arg1 enableWrites:(BOOL)arg2;
- (BOOL)hasEverConnectedToDatabase;
- (BOOL)requiresPostProcessing;
- (id)path;
- (BOOL)isReadable;
- (void)dealloc;
- (void)fillContainerForHomeSharingConnection:(id)arg1 containerID:(long long)arg2 completionHandler:(id)arg3;
- (void)checkForChangesOnConnection:(id)arg1 completionHandler:(id)arg2;

@end
